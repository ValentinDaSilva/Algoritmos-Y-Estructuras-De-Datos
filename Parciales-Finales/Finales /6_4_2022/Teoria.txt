Pregunta 1 ) 
a) El primer índice de una matriz siempre se asocia a las filas, independientemente del nombre que éste tenga.

Esta afirmación es correcta. En C++, cuando se declara una matriz de varias dimensiones, el primer índice se asocia a las filas. Esto significa que puedes acceder a un elemento específico utilizando la notación matriz[fila][columna], donde fila es el primer índice y columna es el segundo índice.


b) Si se tiene una matriz de MxL enteros y se debe indicar si hay al menos 1 columna cuya suma sea 10, la estructura más óptima a utilizar es un while externo con un for interno anidado.

Correcto , El bucle externo while es para que una vez encontrada 1 matriz con una variable bandera pueda cortar las iteraciones y no proseguir buscando, porque solamente se necesita 1. El bucle interno for es para recorrer las filas que tienen que ser recorridas siempre completamente para sumar sus elementos.

c)
Falso , cada {} representa las filas de la matriz.


d) Al pasar una matriz como parámetro a una función, si se inserta un número dentro de los corchetes de la 1era dimensión (por ejemplo: int mat[3][7];) el compilador lo ignorará.

Verdadero.
Cuando pasas una matriz como parámetro a una función en C++, la dimensión de la primera dimensión se ignora. Esto se debe a que, en realidad, estás pasando un puntero a la primera fila de la matriz, y el tamaño de la primera dimensión no es necesario para determinar la dirección de inicio de la matriz.
Verdadero, En C++, cuando se pasa una matriz como parámetro a una función, la información sobre el tamaño de la segunda dimensión (columnas) es necesaria para que el compilador pueda calcular las direcciones de memoria internas de manera adecuada.
La información sobre el tamaño de las columnas (en este caso, 5) es necesaria para que el compilador pueda calcular correctamente las direcciones de memoria de los elementos dentro de la matriz. Esto es porque, aunque el nombre matriz se degrada a un puntero a la primera fila, el compilador aún necesita saber cuántos elementos hay en cada fila para calcular las direcciones de memoria.

Pregunta 2)

a) Es conveniente utilizarlas, en vez de los arreglos dinámicos, si se van a realizar muchas inserciones y eliminaciones de datos
Esto es verdadero, son convenientes porque no hace falta reorganizar toda la estructura a difrerencia de los arreglos que necesitas mover todas las otras posiciones.

b) No necesariamente. El compilador no informará un error si no liberamos el espacio utilizado por un nodo eliminado de una lista enlazada. Es responsabilidad del programador administrar la memoria y liberar los nodos que ya no son necesarios.

c) Falso, si el nuevo nodo que se crea como NODO nuevo_nodo; (osea no un puntero) entonces no es necesariamente de puntero a puntero;

d)Falso, el final de una lista esta determinado por NULL.

Pregunta 3)
a) Verdadero, si es postfijo se realiza despues de la operacion y si es prefijo se realiza antes.
b) Falso, los tipos de datos se claisifcan en simples y compuestos y dentro de los compuestos existe otra clasificacion que es estaticos y dinamicos.
c) Verdadero, En una expresión lógica compuesta por operadores lógicos (como && y ||), la evaluación en cortocircuito significa que la expresión se interrumpe tan pronto como se determina el resultado final. En un and la primera vez que encuentra una expresion falsa ya no sigue y en un or si encuentra una verdadera ya la da toda por verdadera.
d) verdadero, al evaluar una condicion devuelve 1 o 0 y este se podria guardar en una variable booleana.

Pregunta 4)
a) En C++, un programa fuente se obtiene al escribir sentencias en un archivo utilizando un programa editor de texto, y luego ese archivo se almacena en disco con una extensión de archivo comúnmente asociada a C++ (como .cpp).
b) Verdadero,
Teoria: 
    El código objeto es el resultado de la fase de compilación en un proceso de desarrollo de software. Es un archivo binario que contiene el código de máquina generado por el compilador a partir del código fuente. Este código de máquina es específico de la arquitectura de la máquina objetivo y representa las instrucciones que la CPU puede ejecutar directamente . 
    Cuando compilas un programa fuente en C++, el compilador traduce el código fuente a lenguaje de máquina y genera un programa objeto. Este programa objeto contiene el código de máquina correspondiente al código fuente
c) Falsa, La combinación se realiza entre el programa objeto y las bibliotecas del sistema, no con el programa fuente. Este proceso de montaje o link produce un programa ejecutable.

d) Verdadero:
    El programa ejecutable puede ejecutarse tantas veces como sea necesario mientras se respeten las condiciones del entorno en el que se está ejecutando. Cuando dices "correr" o "ejecutar" un programa, te refieres a iniciar la ejecución del código del programa en una computadora.

    Cada vez que ejecutas un programa, el sistema operativo carga el programa en la memoria, asigna los recursos necesarios y comienza la ejecución desde la entrada principal del programa (por ejemplo, la función main en C++). Después de que el programa se ejecuta y completa su tarea, se libera la memoria asignada y se cierra.

    Puedes ejecutar un programa tantas veces como desees, siempre y cuando los recursos necesarios estén disponibles y no haya condiciones específicas que limiten la ejecución (como restricciones de seguridad, recursos insuficientes, etc.). Este es uno de los conceptos fundamentales de la ejecución de programas en sistemas informáticos.

Pregunta 5)
a) Verdadero, Es cierto que la recursión puede consumir más memoria que las técnicas iterativas en algunos casos. Cuando una función se llama a sí misma de forma recursiva, cada llamada adicional se agrega a la pila de llamadas (stack). Esta pila almacena información sobre las llamadas pendientes, como los parámetros y las variables locales, hasta que se alcanza el caso base y las llamadas se resuelven en reversa.

b) Verdadero, Si la recursión no se controla adecuadamente, puede llevar a un desbordamiento de la pila de llamadas, lo que se conoce como desbordamiento de pila (stack overflow). Esto puede ocurrir si hay demasiadas llamadas recursivas anidadas sin llegar al caso base. La cantidad de memoria disponible en la computadora puede limitar el número de llamadas recursivas que una función puede realizar. Cada llamada recursiva agrega información a la pila de llamadas, y si la pila alcanza su límite, se produce un desbordamiento de pila (stack overflow).

c) Falso, el caso base no tiene un llamado a la propia funcion, si fuera asi se generaria una recursion infinita.

d) Verdadero, en teoría, cualquier función que se pueda expresar de manera recursiva también puede reescribirse utilizando estructuras repetitivas (bucles). La recursión y las iteraciones (uso de bucles) son dos enfoques distintos para resolver problemas, y es posible transformar uno en el otro. Sin embargo, la transformación directa puede no ser siempre sencilla o clara, ya que cada enfoque tiene sus propias características y ventajas en situaciones específicas.

Pregunta 6)
a) Verdadero, si bien la busqueda binaria tiene complejidad logaritmica en el peor de los casos donde el elemento sea el primero se necesitaria recorrer todo el vector para mover las posiciones todas a la derecha al eliminar el elemento, dejando una complejidad lineal. La complejidad final de un algoritmo se determina por la operación dominante, es decir, la operación que contribuye más significativamente al crecimiento de la complejidad a medida que el tamaño de la entrada aumenta.

b) Falso, dependiendo del agloritmo de busqueda que se use dependera la complejidad. Podrian adaptarse

c) Falso, Si la matriz tiene dimensiones MxN (M filas y N columnas) y deseas imprimir la columna completa, la complejidad sería O(M), ya que debes recorrer todas las filas de esa columna específica.

d) Falso, para tener complejidad logaritmica se tiene que ir achicando la talla del problema en cada iteracion, tendria complejidad O(N).

Pregunta 7)
a) Verdadero, uno de los objetivos de las funciones es poder modularizar
b) Verdadero, en las funciones tipo void no es necesario poner los returns;
c) Falso, no es necesario poner los nombres de las variables.
d) Verdadero, primero se va a ejecutar la funcion interna y el valor que se devuelve es utilizado en la funcion externa.

Pregunta 8)
a) Falso, strlen() es la funcion.
b) Falso, no pasan por referencia ni por copia, son punteros.
c) Falso, si la primera es menor que la segunda devuelve valor negativo.
d) Verdadero, pone los espacios que se colocan al inicio.